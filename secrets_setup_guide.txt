# Streamlit Secrets Setup Guide

## Overview
Streamlit secrets allow you to store sensitive information like API keys, tokens, and passwords securely without exposing them in your code or GitHub repository.

## Local Development Setup

### 1. Create the secrets file
In your project directory, create the following structure:
```
your-project/
├── .streamlit/
│   └── secrets.toml
├── streamlit_app.py
├── websocket_handler.py
├── requirements.txt
└── .gitignore
```

### 2. Create `.streamlit/secrets.toml`
```toml
# DhanHQ API Credentials
DHAN_ACCESS_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
DHAN_CLIENT_ID = "1000000001"

# Optional: Additional configurations
[app_config]
debug_mode = true
max_websocket_retries = 3
chart_update_interval = 2
```

### 3. Add to `.gitignore`
```gitignore
# Streamlit secrets
.streamlit/secrets.toml

# Python
__pycache__/
*.py[cod]
*$py.class
*.so

# Virtual environment
venv/
env/
.venv/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
```

## Streamlit Cloud Deployment

### Method 1: Through Streamlit Cloud Dashboard

1. **Deploy your app** on Streamlit Cloud
2. **Go to your app's dashboard** at share.streamlit.io
3. **Click on your app** and go to "Settings"
4. **Navigate to "Secrets"** tab
5. **Add your secrets** in TOML format:

```toml
DHAN_ACCESS_TOKEN = "your_access_token_here"
DHAN_CLIENT_ID = "your_client_id_here"
```

6. **Click "Save"** and your app will automatically redeploy

### Method 2: Through App Interface

1. When your app is deployed, if secrets are missing, you'll see an error
2. **Click the "Manage app" button** in the error message
3. **Go to "Secrets"** section
4. **Paste your secrets** in TOML format
5. **Save and redeploy**

## Using Secrets in Your Code

### Basic Usage
```python
import streamlit as st

# Access secrets
access_token = st.secrets["DHAN_ACCESS_TOKEN"]
client_id = st.secrets["DHAN_CLIENT_ID"]
```

### With Error Handling
```python
import streamlit as st

try:
    access_token = st.secrets["DHAN_ACCESS_TOKEN"]
    client_id = st.secrets["DHAN_CLIENT_ID"]
    st.success("Credentials loaded from secrets")
except KeyError as e:
    st.error(f"Missing secret: {e}")
    st.stop()
```

### Nested Secrets
```python
# If you have nested configuration in secrets.toml:
# [database]
# host = "localhost"
# port = 5432

db_host = st.secrets["database"]["host"]
db_port = st.secrets["database"]["port"]
```

### Environment-Specific Secrets
```python
# secrets.toml:
# [development]
# api_url = "https://api-dev.example.com"
# 
# [production]  
# api_url = "https://api.example.com"

import os
env = os.getenv("ENVIRONMENT", "development")
api_url = st.secrets[env]["api_url"]
```

## Best Practices

### 1. Secret Naming
- Use UPPERCASE for environment-style secrets
- Use descriptive names: `DHAN_ACCESS_TOKEN` not `TOKEN`
- Group related secrets: `[database]`, `[api]`, etc.

### 2. Security
- **Never commit secrets.toml** to version control
- **Use different tokens** for development and production
- **Rotate tokens regularly**
- **Use minimal permissions** for API tokens

### 3. Validation
```python
import streamlit as st

def validate_secrets():
    required_secrets = ["DHAN_ACCESS_TOKEN", "DHAN_CLIENT_ID"]
    missing = []
    
    for secret in required_secrets:
        try:
            value = st.secrets[secret]
            if not value or len(value.strip()) == 0:
                missing.append(secret)
        except KeyError:
            missing.append(secret)
    
    if missing:
        st.error(f"Missing required secrets: {', '.join(missing)}")
        st.stop()
    
    return True

# Use in your app
validate_secrets()
```

## Common Issues and Solutions

### Issue 1: "KeyError" when accessing secrets
**Problem**: Secret key doesn't exist or is misspelled

**Solution**: 
- Check spelling in both code and secrets.toml
- Verify secrets.toml is in `.streamlit/` directory
- Check indentation in TOML file

### Issue 2: Secrets not updating in Streamlit Cloud
**Problem**: Changes to secrets don't take effect

**Solution**:
- Click "Save" button in Streamlit Cloud secrets interface
- Wait for automatic redeploy (may take 1-2 minutes)
- Try manual reboot if needed

### Issue 3: Local secrets work but cloud deployment fails
**Problem**: Different secret formats or missing cloud secrets

**Solution**:
- Ensure secrets are configured in Streamlit Cloud dashboard
- Check that TOML format is identical
- Verify no extra spaces or characters

### Issue 4: TOML parsing errors
**Problem**: Invalid TOML syntax

**Solution**:
```toml
# Correct TOML format
SIMPLE_SECRET = "value"

[section]
nested_secret = "value"

# Strings with quotes inside need escaping
COMPLEX_SECRET = 'Token with "quotes" inside'

# Multi-line strings
LONG_TOKEN = """
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.
eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.
SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
"""
```

## Testing Secrets Setup

Create this test script to verify your secrets are working:

```python
# test_secrets.py
import streamlit as st

st.title("Secrets Test")

try:
    # Test basic secrets
    access_token = st.secrets["DHAN_ACCESS_TOKEN"]
    client_id = st.secrets["DHAN_CLIENT_ID"]
    
    st.success("✅ Secrets loaded successfully!")
    st.write(f"Client ID: {client_id[:8]}...")  # Show partial ID for verification
    st.write(f"Token length: {len(access_token)} characters")
    
    # Test nested secrets (if you have them)
    if "app_config" in st.secrets:
        debug_mode = st.secrets["app_config"]["debug_mode"]
        st.write(f"Debug mode: {debug_mode}")
    
except KeyError as e:
    st.error(f"❌ Missing secret: {e}")
    st.write("Please configure your secrets in:")
    st.write("- Local: `.streamlit/secrets.toml`")
    st.write("- Cloud: Streamlit Cloud dashboard > Settings > Secrets")
```

## Integration with Your DhanHQ App

Your updated app will now:

1. **Try to load credentials from secrets** first
2. **Fall back to manual input** if secrets aren't configured
3. **Show appropriate status messages** to guide users
4. **Work seamlessly** in both local development and cloud deployment

This provides the best user experience while maintaining security for your API credentials.
